---
layout: master
title: Configuring your application for use with BTrace
---

<div class='panel'>
<h2>Configuring your application for use with BTrace</h2>
	
Specific documentation relating to EurekaJ Profiler is specified here. Please also refer to the complete BTrace documentation at the <a href="http://kenai.com/projects/btrace/pages/UserGuide">BTrace project site</a>.
	
There are a couple of things that needs to be setup in order to run BTrace in a way that will work together with EurekaJ. The most imporant, though is the configuration of of BTrace as a java agent to the application that you want to monitor/instrument. Most commonly, BTrace will be included as an agent using the -javaagent parameter in the JAVA_OPTS configuration.
	
<h3>Specifying BTrace via JAVA_OPTS.</h3>
There are a couple of important variables that need to be set, the first one being the path to the btrace-agent.jar file. The "=" after the jar file specifies the list of parameters that will be passed on to the BTrace agent. 
	
{% highlight bash %}
JAVA_OPTS="-Dbtrace.agent=EurekaJAgent -javaagent:/path/to/btrace-agent.jar=scriptdir=/path/to/btrace-scripts,stdout=false,fileRollMilliseconds=7500"
{% endhighlight %}
	
*scriptdir* - Specifies a path to a directory containing pre-compiled BTrace scripts as .class files
*stdout* - Specifies that no BTrace output will be printed to standard out
*fileRollMilliseconds* - Specifies the number of milliseconds each .btrace-logfile will last before it is rolled over and started fresh. BTrace will keep a maximum of 100 .btrace.xx files for each BTrace script. 
	
Optionally it is possible to specify a -Dbtrace.agent System Property to the monitored application. This variable will serve two purposes. First, it will distinguish between .btrace.xx files by prepending the btrace.agent property. Second, it will make the BTrace agentname reachable from within the BTrace scripts. 
</div>