---
layout: master
title: Moving your profiling to the Cloud
---

<div class="panel" style="width: 100%;">

h2. Moving your profiling to the Cloud

For the last couple of years I have been working on an application that makes it possible to visualize and alert upon metrics generated by a profiling agent for the JVM. During the process I have looked into a number of technologies and have tried to choose the tools that are most suitable for each part of the design. I started out writing my own Java agent before I discovered BTrace in 2009. BTrace promises to be "a safe, dynamic tracing tool for the Java platform", and I decided to make the switch from my custom developed agent towards BTrace. 

To make a cloud-based profiler work properly EurekaJ needs a reliable way to submit data from the java agent to the server-side manager application (EurekaJ.Manager), while still making sure that the agent does not cause too much load on the application being monitored, especially if the data is going to be tranferred accross the network to a remote host. 

In the EurekaJ Architecture the BTrace agent will log its tracing output to a set of rotated files on the filesystem, while a small proxy application will parse these files and transfer its contents to the remote manager application.

EurekaJ Manager currently stores its data using an embedded key-value database where the data is stored on the local filesystem (Berekely DB JE). Now, I still wanted to be able to deploy and run EurekaJ Manager in this mode for installations where EurekaJ Manager needs to be located on the local internal network. In addition I also wanted a "Cloud mode" where EurekaJ could store its data in a key-value database that lived in the Cloud. I started looking at Amazons SimpleDB, a key/value based cloud storage option, and came pretty far along the path to implementing SimpleDB storage as a plugin to EurekaJ Manager before realizing that what I needed wasn't a new database, but a reliable and scalable cloud-based filesystem with a low latency. Luckily Amazon offers just that, the Amazon Elastic Block Store (EBS). 

h3. The Profiling Architecture

The profiling architecture consists of 4 main parts that needs to be in place in order to work: 

* The application being monitored
* The BTrace Java agent - Tracing application metrics and logging these to the local filesystem
* The EurekaJ Proxy - Parsing BTrace tracelogs and passing the metrics along to EurekaJ Manager
* The EurekaJ Manager - Collecting the metrics, analysing, visualising and alerting upon those metrics

<img src="images/blog_cloud_eurekaj_architecture.png"/><br>

The only real difference between running EurekaJ Manager on a local server on the LAN and running it on Amazon Elastic Compute Cloud (EC2), is the fact that we are utilizing the Amazon Elastic Block Store, a safe, reliable, persistent and low latency filesystem, which is the key to be able to scale the number of metrics a single instance of EurekaJ Manager can handle. 

A bit more information regarding running Berkeley DB JE on the EBS can be found at Charles Lamb's blog post: <a href="http://blogs.oracle.com/charlesLamb/entry/berkeley_db_java_edition_and_a_2">http://blogs.oracle.com/charlesLamb/entry/berkeley_db_java_edition_and_a_2</a>.

h3. Configuration in the Cloud

{% highlight bash %}
mkfs.ext3 /dev/sdh
sudo mkdir /mnt/-20110517
sudo mount -t ext3 /dev/sdh /mnt/rj-09031301
{% endhighlight %}

{% highlight javascript %}
sudo mkdir /mnt/ed-20110517/eurekaj_data
sudo chown ec2-user:ec2-user /mnt/ed-20110517/eurekaj_data
{% endhighlight %}